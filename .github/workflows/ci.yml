name: 'CI'

on:
  workflow_dispatch:
    inputs:
      imageTag:
        description: 'Container Image Tag'
        required: true
        default: 'latest'
      shouldPushImageToDockerHub:
        description: 'Push Container Image To DockerHub'
        type: boolean

jobs:
  build-and-push-artifacts:
    # environment: DEV
    runs-on: ubuntu-latest

    env:
      REVERSE_PROXY_URL: ${{ secrets.REVERSE_PROXY_URL }}
      MAVEN_GROUP_ARTIFACTORY_ENDPOINT: ${{ vars.MAVEN_GROUP_ARTIFACTORY_ENDPOINT }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      SONARQUBE_ENDPOINT: ${{ vars.SONARQUBE_ENDPOINT }}
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting with Sonarqube
        fetch-depth: 0

    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        # settings-path: ${{ github.workspace }}
        # cache: maven
    
    - name: Setup Maven Configs
      run: |
        echo '${{ vars.MVN_SETTINGS_XML }}' > settings.xml
        cat settings.xml
      
    - name: Build with Maven
      run: |
        mvn -s ./settings.xml clean install -Dbuild.source=${GITHUB_REF##*/} -Dbuild.number=${{ github.run_number }}
        ls -lrtha ./target

    - name: Sonarqube Scan
      run: |
        mvn -s ./settings.xml sonar:sonar
        
    - name: SonarQube Quality Gate check
      # id is required for refering to this steps output in the next steps
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
      env:
       SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.REVERSE_PROXY_URL }}${{ vars.SONARQUBE_ENDPOINT }}
    
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Log SonarQube Quality Gate Status"
      run: |
        echo "SonarQube Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
        cat target/sonar/report-task.txt
 
    - name: Fetching Built Artifact Details
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        echo "BRANCH_NAME=$BRANCH_NAME"
        BUILD_NUMBER=${{ github.run_number }}
        echo "BUILD_NUMBER=$BUILD_NUMBER"
        echo "APPLICATION_GROUPID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout )" >> "$GITHUB_ENV"
        cat "$GITHUB_ENV" | grep APPLICATION_GROUPID
        echo "APPLICATION_ARTIFACTID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )" >> "$GITHUB_ENV"
        cat "$GITHUB_ENV" | grep APPLICATION_ARTIFACTID
        echo "APPLICATION_ARTIFACT_NAME=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout -Dbuild.source=$BRANCH_NAME -Dbuild.number=$BUILD_NUMBER )" >> "$GITHUB_ENV"
        cat "$GITHUB_ENV" | grep APPLICATION_ARTIFACT_NAME
        echo "APPLICATION_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -Dbuild.source=$BRANCH_NAME -Dbuild.number=$BUILD_NUMBER )" >> "$GITHUB_ENV"
        cat "$GITHUB_ENV" | grep APPLICATION_VERSION


    - name: Login and Publish Jar to Nexus RELEASE Repository if required
      if: ${{ ! endsWith(env.APPLICATION_VERSION, '-SNAPSHOT')  }}
      run: |
        mvn -s ./settings.xml deploy:deploy-file -DgroupId=${{env.APPLICATION_GROUPID}} -DartifactId=${{env.APPLICATION_ARTIFACTID}} -Dversion=${{env.APPLICATION_VERSION}} -DgeneratePom=true -Dpackaging=jar -DrepositoryId=ARTIFACTORY -Durl=${{ secrets.REVERSE_PROXY_URL }}${{ vars.MAVEN_RELEASES_ARTIFACTORY_ENDPOINT }} -Dfile=target/${{env.APPLICATION_ARTIFACT_NAME}}.jar

    
    - name: Login and Publish Jar to Nexus SNAPSHOT Repository if required
      if: ${{ endsWith(env.APPLICATION_VERSION, '-SNAPSHOT')  }}
      run: |
        mvn -s ./settings.xml deploy:deploy-file -DgroupId=${{env.APPLICATION_GROUPID}} -DartifactId=${{env.APPLICATION_ARTIFACTID}} -Dversion=${{env.APPLICATION_VERSION}} -DgeneratePom=true -Dpackaging=jar -DrepositoryId=ARTIFACTORY -Durl=${{ secrets.REVERSE_PROXY_URL }}${{ vars.MAVEN_SNAPSHOTS_ARTIFACTORY_ENDPOINT }} -Dfile=target/${{env.APPLICATION_ARTIFACT_NAME}}.jar


    - name: Cleaning Maven Configs
      run: |
        rm -f settings.xml

        
    - name: Fetching Container Image Tag Details
      run: |
        echo "Application Version | Image Tag - 1 : $APPLICATION_VERSION"
        echo "Manual Input        | Image Tag - 2 : ${{ github.event.inputs.imageTag }}"


    - name: Login to Github Container Registry
      uses: docker/login-action@v3
      with:
        # Note: The default registry is dockerHub, updating to github container registry
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Setup Docker Build Tools
      uses: docker/setup-buildx-action@v3


    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event.inputs.shouldPushImageToDockerHub }}
        tags: |
          ghcr.io/devops-mock-projects/github-actions.demo-registration-app:${{ github.event.inputs.imageTag }}
          ghcr.io/devops-mock-projects/github-actions.demo-registration-app:${{ env.APPLICATION_VERSION }}




